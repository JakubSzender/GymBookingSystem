@page "/machinesTable"


@inject IMachineService machineService
@inject ISnackbar snackBar


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Machines</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="machine.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>


        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Machine</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetMachines()" Filter="new Func<Machine, bool>(Search)" @bind-customer="machine">
    <ToolBarContent>
        <MudText Typo="Typo.h6">GymMachines</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Machines..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Machine Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Machine">@context.Name</MudTd>

        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>






@code {

    private string searchString = "";
    private Machine machine = new Machine();
    private List<Machine> machines = new List<Machine>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GetMachines();
    }
    private List<Machine> GetMachines()
    {
        machines = machineService.GetMachines();
        return machines;
    }
    private bool Search(Machine gymMachine)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (gymMachine.Name.Contains(searchString))   
        {
            return true;
        }
        return false;
    }
    private void Save()
    {
        machineService.SaveMachine(machine);
        machine = new Machine();
        snackBar.Add("Machine Saved.", Severity.Success);
        GetMachines();
    }
    private void Edit(int id)
    {
        machine = machines.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        machineService.DeleteMachine(id);
        snackBar.Add("Machine Deleted.", Severity.Success);
        GetMachines();
    }
}






